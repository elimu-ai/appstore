import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'ai.elimu.appstore.utils'
    compileSdk 35

    defaultConfig {
        minSdk 26
        targetSdk 35
        versionCode 2005021
        versionName "2.5.21"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation libs.elimu.analytics // https://jitpack.io/#ai.elimu/analytics
    implementation libs.elimu.common.utils // https://jitpack.io/#ai.elimu/common-utils
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = "ai.elimu"
            artifactId = "appstore"
            version = android.defaultConfig.versionName
            artifact("${buildDir}/outputs/aar/utils-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}
tasks.named("publishAarPublicationToMavenLocal") {
    mustRunAfter(":utils:bundleReleaseAar")
}

tasks.register('removeSnapshot') {
    doLast {
        println("removeSnapshot")

        def file = file("build.gradle")
        def originalFileContent = file.getText()

        Pattern pattern = Pattern.compile("versionName \"\\d+\\.\\d+\\.\\d+-SNAPSHOT\"")
        Matcher matcher = pattern.matcher(originalFileContent)
        matcher.find()
        println("match: ${matcher.group()}")

        def newVersionName = matcher.group().replace("-SNAPSHOT", "")
        println("newVersionName: ${newVersionName}")

        def newFileContent = originalFileContent.replaceFirst("versionName \"\\d+\\.\\d+\\.\\d+-SNAPSHOT\"", newVersionName)
        file.write(newFileContent)
    }
}
tasks.register('getVersionName') {
    doLast {
        println android.defaultConfig.versionName
    }
}
tasks.register('bumpVersion') {
    doLast {
        println("bumpVersion")

        def currentVersionCode = android.defaultConfig.versionCode
        println("currentVersionCode: ${currentVersionCode}")

        def newVersionCode = currentVersionCode + 1
        println("newVersionCode: ${newVersionCode}")

        def newVersionName = newVersionCode.toString().substring(0, 1).toInteger() + "." + newVersionCode.toString().substring(1, 4).toInteger() + "." + newVersionCode.toString().substring(4, 7).toInteger()
        println("newVersionName: ${newVersionName}")

        def file = file("build.gradle")
        def originalFileContent = file.getText()
        def newFileContent = originalFileContent.replaceFirst("versionCode \\d+", "versionCode ${newVersionCode}")
        newFileContent = newFileContent.replaceFirst("versionName \"\\d+\\.\\d+\\.\\d+\"", "versionName \"${newVersionName}\"")
        file.write(newFileContent)
    }
}
tasks.register('addSnapshot') {
    doLast {
        println("addSnapshot")

        def file = file("build.gradle")
        def originalFileContent = file.getText()

        Pattern pattern = Pattern.compile("versionName \"\\d+\\.\\d+\\.\\d+\"")
        Matcher matcher = pattern.matcher(originalFileContent)
        matcher.find()
        println("match: ${matcher.group()}")

        def newVersionName = "${matcher.group().substring(12, matcher.group().length() - 1)}-SNAPSHOT\""
        println("newVersionName: ${newVersionName}")

        def newFileContent = originalFileContent.replaceFirst("versionName \"\\d+\\.\\d+\\.\\d+\"", "versionName ${newVersionName}")
        file.write(newFileContent)
    }
}
